{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "String",
            "metadata": {
                "description": "Azure region for the deployment, resource group and resources."
            }
        },
        "extendedLocation": {
            "defaultValue": {},
            "type": "Object"
        },
        "virtualNetworkName": {
            "defaultValue": "myVnet",
            "type": "String",
            "metadata": {
                "description": "Name of the virtual network resource."
            }
        },
        "tagsByResource": {
            "defaultValue": {},
            "type": "Object",
            "metadata": {
                "description": "Optional tags for the resources."
            }
        },
        "addressSpace": {
            "defaultValue": {
                "addressPrefixes": [
                    "10.1.0.0/16"
                ]
            },
            "type": "Object",
            "metadata": {
                "description": "Array of address blocks reserved for this virtual network, in CIDR notation."
            }
        },
        "encryptionEnabled": {
            "defaultValue": false,
            "type": "Bool"
        },
        "encryptionEnforcement": {
            "defaultValue": "AllowUnencrypted",
            "allowedValues": [
                "AllowUnencrypted",
                "DropUnencrypted"
            ],
            "type": "String"
        },
        "subnets": {
            "defaultValue": [
                {
                    "name": "default",
                    "properties": {
                        "addressPrefixes": [
                            "10.1.0.0/24"
                        ]
                    }
                }
            ],
            "type": "Array",
            "metadata": {
                "description": "Array of subnet objects for this virtual network."
            }
        },
        "ddosProtectionPlanEnabled": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "Enable DDoS Protection Standard on this virtual network."
            }
        },
        "firewallEnabled": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "Enable Azure Firewall on this virtual network."
            }
        },
        "bastionEnabled": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "Enable Azure Bastion on this virtual network."
            }
        },
        "ddosProtectionPlanIsNew": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "Create a DDoS Protection Standard plan."
            }
        },
        "firewallPublicIpAddressIsNew": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "Create a Public IP address for Azure Firewall."
            }
        },
        "firewallPolicyIsNew": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "Create a Firewall Policy."
            }
        },
        "firewallPolicyManagementPublicIPAddressIsNew": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "Create a public ip address for management traffic in the firewall policy"
            }
        },
        "bastionPublicIpAddressIsNew": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "Create a Public IP address for Azure Bastion."
            }
        },
        "bastionNsgIsNew": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "Create a network security group for Azure Bastion."
            }
        },
        "ddosProtectionPlanName": {
            "defaultValue": "##ddos-protection-plan-name-not-set##",
            "type": "String",
            "metadata": {
                "description": "Name of the DDoS Protection plan."
            }
        },
        "ddosProtectionPlanId": {
            "defaultValue": "##ddos-protection-plan-id-not-set##",
            "type": "String"
        },
        "firewallName": {
            "defaultValue": "##firewall-name-not-set##",
            "type": "String",
            "metadata": {
                "description": "Name of the Azure Firewall resource."
            }
        },
        "firewallSkuTier": {
            "defaultValue": "Standard",
            "type": "String"
        },
        "firewallPublicIpAddressName": {
            "defaultValue": "##firewall-public-ip-name-not-set##",
            "type": "String",
            "metadata": {
                "description": "Name of the Public IP address resource."
            }
        },
        "firewallPublicIpAddressId": {
            "defaultValue": "##firewall-public-ip-id-not-set##",
            "type": "String"
        },
        "firewallPolicyName": {
            "defaultValue": "##firewall-policy-name-not-set##",
            "type": "String",
            "metadata": {
                "description": "Name of the Firewall Policy address resource."
            }
        },
        "firewallPolicyId": {
            "defaultValue": "##firewall-policy-id-not-set##",
            "type": "String"
        },
        "firewallPolicyTier": {
            "defaultValue": "Standard",
            "type": "String"
        },
        "firewallPolicyManagementPublicIPAddressName": {
            "defaultValue": "##firewall-policy-management-public-i-p-address-name-not-set##",
            "type": "String"
        },
        "firewallPolicyManagementPublicIPAddressId": {
            "defaultValue": "##firewall-policy-management-public-i-p-address-id-not-set##",
            "type": "String"
        },
        "bastionName": {
            "defaultValue": "##bastion-name-not-set##",
            "type": "String",
            "metadata": {
                "description": "Name of the Azure Bastion resource."
            }
        },
        "bastionPublicIpAddressName": {
            "defaultValue": "##bastion-public-ip-address-name-not-set##",
            "type": "String",
            "metadata": {
                "description": "Name of the Azure Bastion resource."
            }
        },
        "bastionPublicIPAddressId": {
            "defaultValue": "##bastion-public-i-p-address-id-not-set##",
            "type": "String"
        },
        "bastionNsgName": {
            "defaultValue": "##bastion-nsg-name-not-set##",
            "type": "String"
        },
        "bastionNsgId": {
            "defaultValue": "##bastion-nsg-id-not-set##",
            "type": "String"
        },
        "natGatewaysWithNewPublicIpAddress": {
            "defaultValue": [],
            "type": "Array"
        },
        "natGatewaysWithoutNewPublicIpAddress": {
            "defaultValue": [],
            "type": "Array"
        },
        "natGatewayPublicIpAddressesNewNames": {
            "defaultValue": [],
            "type": "Array",
            "metadata": {
                "description": "Array of public ip addresses for NAT Gateways."
            }
        },
        "networkSecurityGroupsNew": {
            "defaultValue": [],
            "type": "Array",
            "metadata": {
                "description": "Array of NAT Gateway objects for subnets."
            }
        },
        "ipv6Enabled": {
            "defaultValue": false,
            "type": "Bool"
        },
        "subnetCount": {
            "defaultValue": 1,
            "type": "Int"
        },
        "addressSpaceStartingAddressChanged": {
            "defaultValue": false,
            "type": "Bool"
        },
        "addressSpaceAddressSizeChanged": {
            "defaultValue": false,
            "type": "Bool"
        },
        "defaultSubnetChanged": {
            "defaultValue": false,
            "type": "Bool"
        },
        "subnetsInfo": {
            "defaultValue": [],
            "type": "Array"
        }
    },
    "variables": {
        "copy": [
            {
                "name": "subnetNames",
                "count": "[length(parameters('subnets'))]",
                "input": "[parameters('subnets')[copyIndex('subnetNames')].name]"
            }
        ],
        "azureFirewallSubnetId": "[if(contains(variables('subnetNames'), 'AzureFirewallSubnet'), resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'AzureFirewallSubnet'), null())]",
        "azureFirewallManagementSubnetId": "[if(contains(variables('subnetNames'), 'AzureFirewallManagementSubnet'), resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'AzureFirewallManagementSubnet'), null())]",
        "azureBastionSubnetId": "[if(contains(variables('subnetNames'), 'AzureBastionSubnet'), resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'AzureBastionSubnet'), null())]",
        "firewallPolicyNameSet": "[not(equals(parameters('firewallPolicyName'), '##firewall-policy-name-not-set##'))]",
        "firewallPolicyIdSet": "[not(equals(parameters('firewallPolicyId'), '##firewall-policy-id-not-set##'))]",
        "firewallPolicyManagementPublicIPAddressIsSet": "[or(not(equals(parameters('firewallPolicyManagementPublicIPAddressName'), '##firewall-policy-management-public-i-p-address-name-not-set##')), not(equals(parameters('firewallPolicyManagementPublicIPAddressId'), '##firewall-policy-management-public-i-p-address-id-not-set##')))]",
        "standardSku": {
            "name": "Standard"
        },
        "staticAllocation": {
            "publicIPAllocationMethod": "Static"
        },
        "publicIpAddressesTags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/publicIpAddresses'), parameters('tagsByResource')['Microsoft.Network/publicIpAddresses'], createObject())]",
        "natGatewayTags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/natGateways'), parameters('tagsByResource')['Microsoft.Network/natGateways'], createObject())]"
    },
    "resources": [
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2024-01-01",
            "name": "[parameters('virtualNetworkName')]",
            "location": "[parameters('location')]",
            "extendedLocation": "[if(empty(parameters('extendedLocation')), null(), parameters('extendedLocation'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('bastionNsgName'))]",
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('bastionPublicIpAddressName'))]",
                "ddosProtectionPlan",
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('firewallPolicyManagementPublicIPAddressName'))]",
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('firewallPublicIpAddressName'))]",
                "natGatewaysWithNewPublicIpAddress_name",
                "natGatewaysWithoutNewPublicIpAddress_name",
                "networkSecurityGroupsNew_name"
            ],
            "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/virtualNetworks'), parameters('tagsByResource')['Microsoft.Network/virtualNetworks'], createObject())]",
            "properties": {
                "addressSpace": "[parameters('addressSpace')]",
                "subnets": "[parameters('subnets')]",
                "enableDdosProtection": "[parameters('ddosProtectionPlanEnabled')]",
                "ddosProtectionPlan": "[if(parameters('ddosProtectionPlanEnabled'), createObject('id', if(parameters('ddosProtectionPlanIsNew'), resourceId('Microsoft.Network/ddosProtectionPlans', parameters('ddosProtectionPlanName')), parameters('ddosProtectionPlanId'))), null())]",
                "encryption": {
                    "enabled": "[parameters('encryptionEnabled')]",
                    "enforcement": "[parameters('encryptionEnforcement')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/ddosProtectionPlans",
            "apiVersion": "2020-11-01",
            "name": "[parameters('ddosProtectionPlanName')]",
            "location": "[parameters('location')]",
            "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/ddosProtectionPlans'), parameters('tagsByResource')['Microsoft.Network/ddosProtectionPlans'], createObject())]",
            "properties": {},
            "copy": {
                "name": "ddosProtectionPlan",
                "count": "[length(range(0, if(parameters('ddosProtectionPlanIsNew'), 1, 0)))]"
            },
            "condition": "[and(parameters('ddosProtectionPlanIsNew'), parameters('ddosProtectionPlanEnabled'))]"
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2020-11-01",
            "name": "[parameters('firewallPublicIpAddressName')]",
            "location": "[parameters('location')]",
            "tags": "[variables('publicIpAddressesTags')]",
            "sku": "[variables('standardSku')]",
            "properties": "[variables('staticAllocation')]",
            "condition": "[and(parameters('firewallPublicIpAddressIsNew'), parameters('firewallEnabled'))]"
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2020-11-01",
            "name": "[parameters('firewallPolicyManagementPublicIPAddressName')]",
            "location": "[parameters('location')]",
            "sku": "[variables('standardSku')]",
            "properties": {
                "publicIPAllocationMethod": "Static",
                "publicIPAddressVersion": "IPv4"
            },
            "condition": "[and(parameters('firewallPolicyManagementPublicIPAddressIsNew'), parameters('firewallEnabled'))]"
        },
        {
            "type": "Microsoft.Network/azureFirewalls",
            "apiVersion": "2020-11-01",
            "name": "[parameters('firewallName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/firewallPolicies', parameters('firewallPolicyName'))]",
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('firewallPolicyManagementPublicIPAddressName'))]",
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('firewallPublicIpAddressName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            ],
            "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/azureFirewalls'), parameters('tagsByResource')['Microsoft.Network/azureFirewalls'], createObject())]",
            "properties": {
                "sku": {
                    "tier": "[parameters('firewallSkuTier')]"
                },
                "firewallPolicy": "[if(or(variables('firewallPolicyNameSet'), variables('firewallPolicyIdSet')), createObject('id', if(parameters('firewallPolicyIsNew'), resourceId('Microsoft.Network/firewallPolicies', parameters('firewallPolicyName')), parameters('firewallPolicyId'))), null())]",
                "ipConfigurations": [
                    {
                        "name": "ipConfig",
                        "properties": {
                            "subnet": {
                                "id": "[variables('azureFirewallSubnetId')]"
                            },
                            "publicIPAddress": {
                                "id": "[if(parameters('firewallPublicIpAddressIsNew'), resourceId('Microsoft.Network/publicIPAddresses', parameters('firewallPublicIpAddressName')), parameters('firewallPublicIpAddressId'))]"
                            }
                        }
                    }
                ],
                "managementIpConfiguration": "[if(and(variables('firewallPolicyManagementPublicIPAddressIsSet'), not(equals(variables('azureFirewallManagementSubnetId'), null()))), createObject('name', 'managementIpConfig', 'properties', createObject('publicIPAddress', createObject('id', if(parameters('firewallPolicyManagementPublicIPAddressIsNew'), resourceId('Microsoft.Network/publicIPAddresses', parameters('firewallPolicyManagementPublicIPAddressName')), parameters('firewallPolicyManagementPublicIPAddressId'))), 'subnet', createObject('id', variables('azureFirewallManagementSubnetId')))), null())]"
            },
            "condition": "[parameters('firewallEnabled')]"
        },
        {
            "type": "Microsoft.Network/firewallPolicies",
            "apiVersion": "2022-07-01",
            "name": "[parameters('firewallPolicyName')]",
            "location": "[parameters('location')]",
            "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/firewallPolicies'), parameters('tagsByResource')['Microsoft.Network/firewallPolicies'], createObject())]",
            "properties": {
                "sku": {
                    "tier": "[parameters('firewallPolicyTier')]"
                }
            },
            "condition": "[and(parameters('firewallPolicyIsNew'), parameters('firewallEnabled'))]"
        },
        {
            "type": "Microsoft.Network/natGateways",
            "apiVersion": "2020-11-01",
            "name": "[parameters('natGatewaysWithoutNewPublicIpAddress')[copyIndex()].name]",
            "location": "[parameters('location')]",
            "tags": "[variables('natGatewayTags')]",
            "sku": "[variables('standardSku')]",
            "properties": "[parameters('natGatewaysWithoutNewPublicIpAddress')[copyIndex()].properties]",
            "copy": {
                "name": "natGatewaysWithoutNewPublicIpAddress_name",
                "count": "[length(parameters('natGatewaysWithoutNewPublicIpAddress'))]"
            },
            "condition": "[greater(length(parameters('natGatewaysWithoutNewPublicIpAddress')), 0)]"
        },
        {
            "type": "Microsoft.Network/natGateways",
            "apiVersion": "2020-11-01",
            "name": "[parameters('natGatewaysWithNewPublicIpAddress')[copyIndex()].name]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "natGatewayPublicIpAddressesNewNames_resource"
            ],
            "tags": "[variables('natGatewayTags')]",
            "sku": "[variables('standardSku')]",
            "properties": "[parameters('natGatewaysWithNewPublicIpAddress')[copyIndex()].properties]",
            "copy": {
                "name": "natGatewaysWithNewPublicIpAddress_name",
                "count": "[length(parameters('natGatewaysWithNewPublicIpAddress'))]"
            },
            "condition": "[greater(length(parameters('natGatewaysWithNewPublicIpAddress')), 0)]"
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2020-11-01",
            "name": "[parameters('natGatewayPublicIpAddressesNewNames')[copyIndex()]]",
            "location": "[parameters('location')]",
            "tags": "[variables('publicIpAddressesTags')]",
            "sku": "[variables('standardSku')]",
            "properties": "[variables('staticAllocation')]",
            "copy": {
                "name": "natGatewayPublicIpAddressesNewNames_resource",
                "count": "[length(parameters('natGatewayPublicIpAddressesNewNames'))]"
            },
            "condition": "[greater(length(parameters('natGatewayPublicIpAddressesNewNames')), 0)]"
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2020-11-01",
            "name": "[parameters('networkSecurityGroupsNew')[copyIndex()].name]",
            "location": "[parameters('location')]",
            "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkSecurityGroups'), parameters('tagsByResource')['Microsoft.Network/networkSecurityGroups'], createObject())]",
            "properties": {},
            "copy": {
                "name": "networkSecurityGroupsNew_name",
                "count": "[length(parameters('networkSecurityGroupsNew'))]"
            },
            "condition": "[greater(length(parameters('networkSecurityGroupsNew')), 0)]"
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2022-07-01",
            "name": "[parameters('bastionPublicIpAddressName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            },
            "condition": "[and(parameters('bastionEnabled'), parameters('bastionPublicIpAddressIsNew'))]"
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2022-07-01",
            "name": "[parameters('bastionNsgName')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "AllowHttpsInBound",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "Internet",
                            "destinationPortRange": "443",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowGatewayManagerInBound",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "GatewayManager",
                            "destinationPortRange": "443",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowLoadBalancerInBound",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "AzureLoadBalancer",
                            "destinationPortRange": "443",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 120,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowBastionHostCommunicationInBound",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationPortRanges": [
                                "8080",
                                "5701"
                            ],
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 130,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "DenyAllInBound",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationPortRange": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowSshRdpOutBound",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationPortRanges": [
                                "22",
                                "3389"
                            ],
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowAzureCloudCommunicationOutBound",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationPortRange": "443",
                            "destinationAddressPrefix": "AzureCloud",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowBastionHostCommunicationOutBound",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationPortRanges": [
                                "8080",
                                "5701"
                            ],
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 120,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowGetSessionInformationOutBound",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "Internet",
                            "destinationPortRanges": [
                                "80",
                                "443"
                            ],
                            "access": "Allow",
                            "priority": 130,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "DenyAllOutBound",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 1000,
                            "direction": "Outbound"
                        }
                    }
                ]
            },
            "condition": "[parameters('bastionNsgIsNew')]"
        },
        {
            "type": "Microsoft.Network/bastionHosts",
            "apiVersion": "2022-07-01",
            "name": "[parameters('bastionName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('bastionPublicIpAddressName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            ],
            "tags": "[if(contains(parameters('tagsByResource'), 'Microsoft.Network/bastionHosts'), parameters('tagsByResource')['Microsoft.Network/bastionHosts'], createObject())]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "IpConf",
                        "properties": {
                            "subnet": {
                                "id": "[variables('azureBastionSubnetId')]"
                            },
                            "publicIPAddress": {
                                "id": "[if(parameters('bastionPublicIpAddressIsNew'), resourceId('Microsoft.Network/publicIPAddresses', parameters('bastionPublicIpAddressName')), parameters('bastionPublicIPAddressId'))]"
                            }
                        }
                    }
                ]
            },
            "condition": "[parameters('bastionEnabled')]"
        }
    ]
}
